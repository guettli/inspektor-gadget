// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package testdata

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type httpEventT struct {
	MountNsId uint64
	Pid       uint32
	Tid       uint32
	Task      [16]int8
	SaddrV4   uint32
	DaddrV4   uint32
	Af        uint32
	PktType   uint32
	Verb      [16]int8
}

type httpSocketsKey struct {
	Netns  uint32
	Family uint16
	Proto  uint16
	Port   uint16
	_      [2]byte
}

type httpSocketsValue struct {
	Mntns   uint64
	PidTgid uint64
	Task    [16]int8
}

// loadHttp returns the embedded CollectionSpec for http.
func loadHttp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HttpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load http: %w", err)
	}

	return spec, err
}

// loadHttpObjects loads http and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*httpObjects
//	*httpPrograms
//	*httpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHttpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHttp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// httpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type httpSpecs struct {
	httpProgramSpecs
	httpMapSpecs
}

// httpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type httpProgramSpecs struct {
	IgTraceHttp *ebpf.ProgramSpec `ebpf:"ig_trace_http"`
}

// httpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type httpMapSpecs struct {
	Events  *ebpf.MapSpec `ebpf:"events"`
	Sockets *ebpf.MapSpec `ebpf:"sockets"`
}

// httpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHttpObjects or ebpf.CollectionSpec.LoadAndAssign.
type httpObjects struct {
	httpPrograms
	httpMaps
}

func (o *httpObjects) Close() error {
	return _HttpClose(
		&o.httpPrograms,
		&o.httpMaps,
	)
}

// httpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHttpObjects or ebpf.CollectionSpec.LoadAndAssign.
type httpMaps struct {
	Events  *ebpf.Map `ebpf:"events"`
	Sockets *ebpf.Map `ebpf:"sockets"`
}

func (m *httpMaps) Close() error {
	return _HttpClose(
		m.Events,
		m.Sockets,
	)
}

// httpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHttpObjects or ebpf.CollectionSpec.LoadAndAssign.
type httpPrograms struct {
	IgTraceHttp *ebpf.Program `ebpf:"ig_trace_http"`
}

func (p *httpPrograms) Close() error {
	return _HttpClose(
		p.IgTraceHttp,
	)
}

func _HttpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed http_bpfel.o
var _HttpBytes []byte
